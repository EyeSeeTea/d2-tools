import { command, flag, option, optional } from "cmd-ts";
import { CategoryOptionCombosD2Repository } from "data/CategoryOptionCombosD2Repository";
import { TranslateCategoryOptionCombosUseCase } from "domain/usecases/TranslateCategoryOptionCombosUseCase";
import { getApiUrlOptions, getD2ApiFromArgs, IdsSeparatedByCommas } from "scripts/common";

/**
 * Translates DHIS2 Category Option Combos (COCs) using their associated Category Options.
 *
 * ## Background
 *
 * In DHIS2, Category Option Combos are autogenerated from:
 * - CategoryCombos → Categories → CategoryOptions
 *
 * However, the DHIS2 API (as of v2.43) does **not**:
 * - Use `categoryOptionCombo[].categoryOptions` to build translated names dynamically.
 * - Set the `categoryOptionCombo.translations` property on creation.
 *
 * As a result, `categoryOptionCombo.displayName` always falls back to `categoryOptionCombo.name`.
 *
 * ## Solution
 *
 * This script generates localized display names for COCs by combining the translations of their
 * associated CategoryOptions in the proper order.
 *
 * ## Technical Notes
 *
 * - **Ordering issue**: The API does not guarantee that `categoryOptionCombo[].categoryOptions`
 *   are returned in the same order as defined by `categoryCombo.categories[].categoryOptions`.
 *   This must be resolved manually (a task ideally suited for the DHIS2 repository layer).
 *
 * - **Legacy COCs**: Some older Category Option Combos may contain categoryOptions not present
 *   in the current categoryCombo definitions. These will be left untranslated.
 *
 * - **Locale fallback**: If a COC contains at least one CategoryOption with a translation for a given
 *   locale, that locale will be considered. If any other CategoryOption lacks that translation,
 *   the fallback/default name (typically English) will be used for that option.
 *
 * ## Approach
 *
 * This script builds translated COC names by:
 * 1. Resolving the correct ordering of CategoryOptions.
 * 2. Extracting translations for each locale.
 * 3. Assembling the localized display name from the translated CategoryOptions.
 *
 * ## Example
 *
 * Given:
 * - CategoryCombo: `Age x Gender`
 * - Categories:
 *   - Age: [`<15`, `15+`]
 *   - Gender: [`Male`, `Female`]
 *
 * And a CategoryOptionCombo with:
 * - categoryOptions: [`15+`, `Female`]
 *
 * With translations for French (`fr`):
 * - `15+` → `15 ans et plus`
 * - `Female` → `Femme`
 *
 * The final translated name for the `fr` locale would be:
 * - `"15 ans et plus, Femme"`
 */

export const translateCocsCmd = command({
    name: "translate",
    description: "Translate category option combos name from their category options",
    args: {
        ...getApiUrlOptions(),
        categoryComboIds: option({
            type: optional(IdsSeparatedByCommas),
            long: "category-combo-ids",
            description: "List of category combo ids whose category option combos will be translated",
        }),
        post: flag({
            long: "post",
            description: "Save the newly translated category option combosr",
        }),
    },
    handler: async args => {
        const api = getD2ApiFromArgs(args);
        const categoryOptionCombosRepository = new CategoryOptionCombosD2Repository(api);

        const useCase = new TranslateCategoryOptionCombosUseCase(categoryOptionCombosRepository);
        const res = await useCase.execute(args);
        if (args.post) {
            console.info(`${res.total} category option combos (${res.untranslated} have been translated)`);
        } else {
            console.info(`${res.total} category option combos (${res.untranslated} need to be translated)`);
        }
    },
});
